1. Multitasking

	multitasking operating system可同时处理运行中的程序
	multiuser multitasking system能处理不同电脑用户之间的内容
	
2.进程调度
	电脑上运行的程序比电脑有的处理器的数量多得多，每个进程都需要争夺资源。
	CPU的时间片是重要的，操作系统必须为进程分配处理时间与安排其处理器
	
	当一个进程启用系统调用或者其时间段暴露的时候，硬件或者软件将强行中断，导致cpu会停止从当前的进程
中获取指令，使用内核中的指定代码代码(designated code)，用于处理中断
	将当前决策的执行状态记录在进程控制模块，以方便下一次的调用。
	之后会执行发送代码，将这个进程以之前的处理状态重新加载以继续处理进程。
	
3.上下文切换
	上下文切换代码必须是高效的，通常有硬件指令支持，会带来性能开销(CPU会花时间执行操作系统的代码)
	
4.多重处理
	多重处理指的是系统中用一个以上的CPU，通常CPU之间是分离的，但是思路仍然是用一个CPU处理多个执行任
务

5.不对称协同多处理

	在不对称的多处理中，一个处理器，即主处理器，集中执行操作系统代码，处理I/O操作，并将工作负载分配
给执行用户进程的其他处理器。在该方案中，只有一个处理器访问系统数据结构进行资源控制。

	优点:更方便编程操作系统的功能
	缺点：在只有少量处理器的小型系统中，主系统可能没有足够的从服务器来保持繁忙，因此无法实现最大的硬
件性能。

6.对称协同多处理
	
	对称多处理是一种所有处理器执行类似功能并自我调度的系统。处理器使用一个共享总线连接到单个共享
主存，并且可以完全访问所有I/O设备，并且由单个操作系统实例控制。

	在选择要执行的进程时，每个处理器将与其他处理器同时检查和操作操作操作系统队列结构。
	编程的时候，必须要谨慎地保护共享数据结构的完整性
	
7.进程调度算法
	
	"Ready" queue:被准备安排到处理器工作的进程放在这个队列中与其他可能等待I/O操作的进程相比，这些
进程已经准备好了执行其指令。

	Processor Utilisation(处理器利用率) = (Execution Time) / ( Total Time)
	Throughput(吞吐量) = Jobs per Unit time
	Turnaround Time(执行时间) = (Time job finishes) - (Time job was submitted)
	Waiting Time(等待时间) = Time doing nothing in a queue
	Response Time(系统反应时间) = (Time job is first scheduled on cpu) -(Time job was submitted)
	
	Gantt Char：用于描述在队列中的进程的顺序
	每个进程按照描述的顺序接收特定资源上的若干个时间单位(做多久)。
	
	调度算法可以是抢占式(preemptive)与非抢占式的(non-preemptive)
	所有的并发系统都是抢占式的，否则就会有进程一直占用CPU
	
8.非抢占算法
	包括:FCFS(First Come First Served),SJF(Shortest Job First)
	
	分析
	FCFS是一种固有的公平算法，但在响应时间很重要的交互式系统和作业长度差异很大的情况下性能很差。
	在吞吐量、等待时间和响应性能方面，SJF是最优的算法，但不公平被作为。它可能会导致时间需求大的得不到安
排，其成为饥荒(starvation)

	SJF时间计算
	 tn = length of burst n
	Tn = average of previous n bursts
	(预估的下一个进程要的时间)tn+1 = atn + (1-a)Tn
	
	SJF注意
	必须维护累积历史信息，并在每次选择下一个任务时执行预测突发长度所需的计算
	长作业在系统中等待CPU的时间越长，它被调度的机会就越大，这可能是更好的。
	
	

	
	
	
	
	
	
	
	
	
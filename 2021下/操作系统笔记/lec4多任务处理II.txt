1.HRN算法
	HRN算法(highest response ratio next请求率最高的优先)
	Response Ratio = (Waiting Time) / (Service Time)	
	当一个进程在预备队列等待越久，它的执行优先级更高
	当请求率相同的时候，优先选择时间最少的，这样都时间相同，那就最先的走
	
2.HRN算法是针对非抢占式的RN算法是针对抢占式的

3.抢占式调度算法
	a)轮询调度法
		作用：其为所有的处理器提供合适的响应时间，这对于在多任务系统中获
	得满意的交互性能是非常重要的。
	
		其实FCFS的抢占式版本
		每个程序时间片暴露后，强行文本切换上下文，时间片为了最好的任务安
	排可以变化。
	
		轮询算法的使用的任务切换比非抢占式的更多使用上下文切换
		上下文切换太多的话，CPU上下文切换的用时更多，做的正事少，
	如果上下文切换的时间片比实际操作的长，那反应时间会很差。当
	CPU时间片间隔较大时，可能采用有反馈的多级队列。
	
	b)多级反馈队列
		进程最初被提交到最高级别的最高优先级队列，在那里它将受
	益于良好的响应时间。如果随着时间的推移，它的行为显示它是需
	要计算的，那么它可以被降级到一个较低优先级的队列，由于更合
	适的CPU量子长度，它将导致较少的任务切换 ，但该队列可能从处
	理器得到较少的关注。
		
		优先级高的队列是FCFS算法，最低的用轮询
	
4.优先调度	
	轮询不允许用户告诉系统哪个任务比其他任务更重要。在优先级调
度系统中，进程被分配一个数字值，该值表示它们的调度优先级。用户
可以指定分配给某个任务的优先级。
	
	这是一种易于实现的方案，但需要计算优先级的方法，以便低优先
级的任务不会饥饿。

5.传统的UNIX调度
	这是一种基于单处理器与单用户的多任务交互环境
	UNIX不是针对实时进程需求的，不考虑多用户与对称多处理
	其用的是多级队列反馈，优先队列是用轮询处理的
	优先队列值在(0-127)
	内核进程优先级0-49，用户的50-127
	系统范围内所有进程的优先级以1秒的间隔从它们的执行历史和用
于将进程置于优先级带(内核还是用户)中的基本优先级级别计算。
	如果1s后用户进程还在使用cpu,则接下来会执行最高级别的任务
	为确保进程最终重新调度，则记录的进程CPU利用率在每个优先级
重新计算的间隔的时候，CPU利用率衰减

6.处理多用户
	我们不需要为不同用户或者不同应用程序提供公平的CPU时间片
	
	
	
	
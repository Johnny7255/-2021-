1.程序
	
	程序是一组指令序列的集合，是讲算法翻译成编程语言。
	
	编译器将程序语言翻译成能够让处理器使用的机器指令，并且储存在obj文件中。
	
2.进程
	
	进程是运行中程序的实例，是一种对操作系统的抽象，指令结束完，进程结束。
	
	程序的可执行模块以程序图的形式载入主存，处理器从中获得指令，程序图
有个表，这个表因为不同操作系统与处理器的不同而不同，其包括程序参数，栈
空间，数据空间与程序代码。

	是可执行的文本，当她运行时，它是一组内核信息的集合。
	是有一定运行时间(生命周期)的动态实例。
	对于系统服务来说，它一直在。
	操作系统本身就是由一堆进程出组成。
	
3.处理器
	
	处理器是执行在储存在内存图指令的代理，CPU是个处理器，大多数处理器都有
多个处理核，能同时处理多个进程的指令。

4.运行中进程的处理器时间分配
	
	由于在一个系统中，进程的数量远远超过处理器的数量，所以当有指令要执行时，
进程通过将CPU的时间分配给准备就绪的进程来共享处理器的资源。

5.阻塞进程
	
	进程并不总是可以使用处理器,有时他们必须等待其他设备，可能是提供数据
	，或他们必须等待需要分配的资源,或已经在使用,或者他们必须等待用户交互
	或必须发生的时间段才可以继续。

6.抽象进程的表现
	
	操作系统的基本任务是进程管理，负责管理运行环境。
	
	操作系统必须为进程分配cpu之间与内存空间等资源。同时要在不同处理器活动
中保护资源，并且当不同进程使用相同程序时提供异步机制。

	操作系统会用一些数据结构代表其正在处理的进程对象。
	
	对于每一个进程，操作系统会维护进程控制模块(process control bloc PCB)
或者用于搞清楚进程正在干嘛，执行到哪里，用了什么资源的进程描述符。

	PCB用于跟踪可执行文本，PCB可以将进程独立调度到任意可用的处理器上。
	
	上下文包括:
	Process Identification Data (进程ID)
	Processor State(处理器状态)
	Process Control Data(进程控制数据)
	
	去课件12页看具体上下文内容
	
7.进程生命周期
	
	根据优先级或执行状态的不同，PCB可以在进程生命周期内的不同队列之间移动。
	
	队列保持进程等待不同的资源，这些资源使用调度算法提供服务。

	一个进程的PCB是用于展示一个OS队列中的进程。
	
8.与操作系统的交流
	
	处于安全考虑，直接或者间接与不相干进程交流或者与硬件与操作系统本身交流，
只能通过一种特殊的机制做到。

	与在系统中其他进程的交流，需要用操作系统提供的特殊的中间交流进程，这些
函数将信息数据从一个进程映射到另外一个进程。

	操作系统之间的交流，太多一种特殊的，制动切换处理器运行模式的系统调用机
制实现。

	为了保护硬件，一些处理器是不能被用户使用的。
	
	处理器有用户模式与管理模式，用户进程在用户模式下运行，只能执行处理器指
令的一部分。为了执行操作系统的内容，处理器必须变成管理模式，进入控制行为，然
后就可以使用所有处理器的指令集。

	处理器可能实现几种执行模式，但至少需要两种模式来保护系统不受用户进程活动
的影响。

	操作系统的代码有执行的特权，能使用处理器所有操作指令集，但是用户模式不能。
	
	软件中断是一种跳转到管理模式的方式。
	
	进程需要通过与操作系统交流以获得或者使用资源。
	
	硬件中断机制对于高效大量管理大量硬件设备是必要的。并发环境也需要中断机制。
	
	每当一个处理器开启一项任务的时候，都会初始化一个时钟，当时钟发出中断信号
时候，操作系统都会选择别的进程，这可以防止一个进程无限期地占有CPU
	
	
	
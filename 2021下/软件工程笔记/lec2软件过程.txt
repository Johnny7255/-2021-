1.总体软件过程的基础活动
	Software Specification
	Software Development
	Software Evolution
	Software Validation
	
2.瀑布模型
	特点：意琦行全部安排好所有的开发活动(process activites),在正式开发之前
	原则上：在完成上一个阶段后才能开始下一个阶段
	
	活动：
	
	*需求分析与需求定义
		手机壳有需求功能相关的消息与约束
		分析当前的系统是否能在当前的预算，资源，时间，技术与能力之间做到
		创建详细的系统细则
	
	*系统与软件设计
		为软件或者硬件的系统分配需求
		创建一个完整的系统架构
	
	*执行单元测试
		软件设计由一组程序或者程序单元实现，判断每个单元能否满足相应的细则
	
	*集成与系统测试
		单独的程序单元与程序集成为一个完整的系统。验证与评估是否在测试后给用户
	
	*执行与维护(operation and maintenance)
		将系统部署(deploy)为最小的使用单元
		系统可能因为错误或者安全威胁不但更新，或者加强系统某些功能
		
	应用：
	适用于：集成系统，关键系统，大规模日降血糖
	不适用于：必须要应对各种情况变化的程序
	
2.V模型
	.便于管理
	.支持所有阶段的验证与评估
	.开发与测试同等重要
	.不适合开发者去长与复杂的面向对象软件项目
	.不适合存在需求变化影响严重的程序
	
3.迭代模型
	.从一个简单的系统实现开始
	.每次向产品中加入新的功能，直到完成最终版本
	.小规模地编写与测试程序，降低开发过程之间的关联风险
	.在开发过程中能够较为简单地处理需求变化
	
	优点：
		.需求变化成本少
		.能较早获得反馈
		.能够早点提交部分可运行的产品
		
	缺点：
		.进度不可视
		.新的迭代的加入可能导致系统结构变差
		
4.螺旋模型
	.确定目标
	.评估与弱化风险
	.开发与测试
	.开启下一个迭代
	
	集成与配置
	.面向复用开发，重用现存的软件
	.依赖一系列可复用的组件，然后将各个组件集成在一个框架中
	
	过程阶段
	.确定需求细则
		收集最初的需求，并且确定不会改变的需求的描述
	.软件发掘与评估
		为软件需求确定基础轮廓，然后为功能收集与提供组件或者系统
	.需求完善
	.应用系统配置
	.应用与集成组件
	
	优点：
		.减少需要开发的软件的数量
		.减少成本与风险
		.快速的软件交付
		
	缺点：
		.需求可能与原有系统的需求思路偏移
		.对于系统升级的控制有限
		
5.统一软件开发过程(Rational Unified Process)
		开端(inception)：
				为项目开启一个最基础的域与一个基础版本。它不应该用于
			确定是有需求，或者生成可用的项目计划。
			
			内容：
				.分析部分使用案例
				.分析非功能性需求
				.创建商用例
				.为开发环境做准备
			
		展开(Elaboration)
			创建核心软件架构，分解高风险元素，定义绝大多数的需求，
		评估全局的安排与资源。
			
			内容：
				.将最核心与危险的架构编程与测试
				.发掘与确立大多数需求
				.分解主要的风险
				.可能包括几次迭代(2-6周)
	
		构建(Construction)
			
			内容：
				.关注系统的设计，应用与测试
				.开发与集成一部分系统
				.完成阶段，部分可工作系统的相关文档应当准备好给用户
				
		转化(Transition)
		
			内容：
				.在实际应用场景中使用系统
				.最终阶段，软件应该是
					*写好了文档
					*正常工作
					*在相应正确的运行环境下工作
		
		以上四个是一个开发迭代中各个阶段。	
		
6.术语
	原型(prototype):原型是系统一些功能中简单功能的实现，通常用于交给用户获取反馈或者用于评估，
用完就扔掉。
	概念验证阶段(proof-of-concept): 用于证明一些目标架构的风险组件是否可行，并且强调问题与缺陷
的临时代码。
	骨架(skeleton)：也被叫做进化原型(evolutionary prototype)，是系统功能的较小功能实现的子集，在
构建阶段不应该被丢弃。
1.二进制计算
	ADD：整数加法
	ADC：加与进位
	SUB：减法与借位
	CMP：比较两个整数，返回差值
		以上四个影响:
					AF,CF,OF,PF,SF,ZF
	INC：+1
	DEC：-1
		这两个除了CF上面的都影响
	DIV：不在意正负号的出发
	IDIV：在一符号的出发
	MUL：不在意符号的乘法
	IMUL：在意符号的乘法
		这四个答案总是在AX
		
	ADC与ADD区别
		当CF置1时，其比ADD多加1
		
2.十进制算法
	AAA：在加法运算后做ASCII调整
	AAD：除法，先ASCII调整再做
	AAM：乘法,乘法后ASCII调整
	AAS：减去后ASCII调整
	
	PS:
		ASCII调整的意思三，对于'0'到'9'这种编码，转化为ascii需要加上OX30
		如果每一次都这样加会比较麻烦，ASCII调整回让值留存在0-9之间，进位
		记在ah上，进位存在CF上，ah也会对应进位。
	
3.逻辑运算
	 AND
	 OR
	 XOR
	 
	 BT:位测试
	 BTC:先测试，再补位
	 BTR:先测试，再置0
	 BTS:先测试，再置1
	 这个系列值都在CF，位测试指的是检测某个位置上的值三0还是1
	 eg:BT AX,2
	
	 BSF:向前位扫描直到遇到1
	 BSR:向后位扫描知道遇到0
	 在两个的计数都是从0开始
	 EG:BSF AX,DX 这个会赋值到DX
	 
	 SHL:左移位运算
	 SHR:右移位运算
	 SHLD:一次位移两个格子(左
	 SHRD:一次位移两个格子（右
	 SAL:JAVA的<<<，SAL和SHL等价，右边补0
	 SAR:JAVA的>>>
	
	RCL:左旋转
	RCR:右旋转
	旋转其实可以结合位移理解，不过被移除的部分会被移动到添加的位置。
	
4.控制跳转
	执行指令的时候，IP指针一般一次+1
	但是
	分支指令(branch instructions)可以直接改变IP指针的指向（通过加减），
这个跳跃有限-128到127，全都是条件跳跃
	调用指令(call instructions)可以直接尺寸当前IP指针的值
	无条件跳跃跳的挺远
	
5.循环
	LOOP 如果CX不是0就循环
	LOOPNZ NZ和CX不是0就循环
	LOOPZ NZ是0，CX是不是0就循环
	
	
	
	